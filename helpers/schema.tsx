/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type MessageRole = "assistant" | "user";

export type TicketPriority = "high" | "low" | "medium" | "urgent";

export type TicketStatus = "closed" | "in_progress" | "open" | "resolved";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface ChatMessages {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  message: string;
  role: MessageRole;
  sessionId: string;
}

export interface ChatSessions {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  sessionId: string;
}

export interface Tickets {
  createdAt: Generated<Timestamp>;
  description: string;
  id: Generated<number>;
  priority: Generated<TicketPriority>;
  status: Generated<TicketStatus>;
  title: string;
  updatedAt: Generated<Timestamp>;
}

export interface DB {
  chatMessages: ChatMessages;
  chatSessions: ChatSessions;
  tickets: Tickets;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const TicketStatusArrayValues: [TicketStatus, ...TicketStatus[]] = ["closed","in_progress","open","resolved"];
export const TicketPriorityArrayValues: [TicketPriority, ...TicketPriority[]] = ["high","low","medium","urgent"];
export const MessageRoleArrayValues: [MessageRole, ...MessageRole[]] = ["assistant","user"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.